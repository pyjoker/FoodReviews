@model FoodReviews.Models.Restaurant

@{
    ViewData["Title"] = Model.RestaurantName;
    var categories = ViewBag.Categories as List<string>;
    var selectedCategories = ViewBag.SelectedCategories as Dictionary<string, bool>;
}

<div class="restaurant-details">
    <div class="restaurant-header">
        <h1>@Model.RestaurantName</h1>
        <div class="rating-container">
            @if (Model.AverageRating.HasValue)
            {
                <div class="rating">
                    <span class="rating-value">@Model.AverageRating.Value.ToString("F1")</span>
                    <div class="stars">
                        @for (int i = 1; i <= 5; i++)
                        {
                            if (i <= Math.Round(Model.AverageRating.Value))
                            {
                                <span class="star filled">★</span>
                            }
                            else
                            {
                                <span class="star">☆</span>
                            }
                        }
                    </div>
                    <span class="review-count">(@Model.TotalReviews 則評論)</span>
                </div>
            }
            else
            {
                <div class="no-rating">尚無評分</div>
            }
        </div>
    </div>

    <div class="menu-section">
        <h2>菜單</h2>
        
        <div class="menu-controls">
            <div class="category-filters">
                <div class="form-check form-check-inline">
                    <input class="form-check-input category-filter" type="checkbox" 
                           id="category-all" value="all" checked>
                    <label class="form-check-label" for="category-all">全部</label>
                </div>
                @foreach (var category in categories)
                {
                    <div class="form-check form-check-inline">
                        <input class="form-check-input category-filter" type="checkbox" 
                               id="category-@category" value="@category" 
                               @(selectedCategories[category] ? "checked" : "")>
                        <label class="form-check-label" for="category-@category">@category</label>
                    </div>
                }
            </div>

            <div class="sort-controls">
                <select id="sortOrder" class="form-select">
                    <option value="default">預設排序</option>
                    <option value="rating-desc">評分由高至低</option>
                    <option value="rating-asc">評分由低至高</option>
                    <option value="price-desc">價格由高至低</option>
                    <option value="price-asc">價格由低至高</option>
                </select>
            </div>
        </div>

        <div class="menu-items">
            @foreach (var category in categories)
            {
                <div class="menu-category" data-category="@category">
                    <h3>@category</h3>
                    <div class="menu-items-grid">
                        @foreach (var item in Model.MenuItems.Where(m => m.Category == category))
                        {
                            <div class="menu-item" 
                                 data-rating="@(item.AverageRating ?? 0)" 
                                 data-price="@item.Price"
                                 data-item-id="@item.MenuItemId"
                                 data-item-name="@item.ItemName"
                                 data-item-description="@item.Description"
                                 data-item-rating="@(item.AverageRating ?? 0)"
                                 data-item-reviews="@item.TotalReviews"
                                 onclick="showReviews(this)">
                                <div class="item-header">
                                    <div class="item-name">@item.ItemName</div>
                                    <div class="item-price">NT$ @item.Price.ToString("N0")</div>
                                </div>
                                @if (item.AverageRating.HasValue && item.AverageRating > 0)
                                {
                                    <div class="item-rating">
                                        <div class="stars">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                if (i <= Math.Round(item.AverageRating.Value))
                                                {
                                                    <span class="star filled">★</span>
                                                }
                                                else
                                                {
                                                    <span class="star">☆</span>
                                                }
                                            }
                                        </div>
                                        <span class="review-count">(@item.TotalReviews)</span>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="action-buttons">
        <a asp-action="Index" class="btn btn-secondary">返回列表</a>
        <a href="@Url.Action("Index", "Home")" class="btn btn-outline-primary">返回搜尋</a>
    </div>
</div>

<!-- 評論彈出式視窗 -->
<div class="modal fade" id="reviewsModal" tabindex="-1" aria-labelledby="reviewsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="reviewsModalLabel">評論</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="item-info mb-3">
                    <h4 id="modalItemName"></h4>
                    <div class="item-rating-summary">
                        <span class="rating-value" id="modalItemRating"></span>
                        <div class="stars" id="modalItemStars"></div>
                        <span class="review-count" id="modalItemReviewCount"></span>
                    </div>
                </div>
                <div class="reviews-container" id="reviewsContainer">
                    <!-- 評論將在這裡動態加載 -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
            </div>
        </div>
    </div>
</div>

<style>
    .restaurant-details {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .restaurant-header {
        margin-bottom: 30px;
        text-align: center;
    }

    .restaurant-header h1 {
        margin-bottom: 10px;
        color: #333;
    }

    .rating-container {
        margin-bottom: 20px;
    }

    .rating {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

    .rating-value {
        font-size: 24px;
        font-weight: bold;
        color: #f39c12;
    }

    .stars {
        display: flex;
        gap: 2px;
    }

    .star {
        font-size: 24px;
        color: #ddd;
    }

    .star.filled {
        color: #f39c12;
    }

    .review-count {
        color: #666;
        font-size: 14px;
    }

    .no-rating {
        color: #666;
        font-style: italic;
    }

    .menu-section {
        margin-top: 30px;
    }

    .menu-section h2 {
        text-align: center;
        margin-bottom: 20px;
        color: #333;
    }

    .menu-controls {
        display: flex;
        flex-direction: column;
        gap: 20px;
        margin-bottom: 30px;
    }

    .category-filters {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        justify-content: center;
    }

    .sort-controls {
        display: flex;
        justify-content: center;
    }

    .form-select {
        width: 200px;
        padding: 8px;
        border-radius: 5px;
        border: 1px solid #ddd;
    }

    .form-check-inline {
        margin-right: 15px;
    }

    .menu-category {
        margin-bottom: 30px;
    }

    .menu-category h3 {
        color: #666;
        border-bottom: 2px solid #eee;
        padding-bottom: 10px;
        margin-bottom: 20px;
    }

    .menu-items-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 20px;
    }

    .menu-item {
        background: #fff;
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        cursor: pointer;
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .menu-item:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .item-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .item-name {
        font-weight: bold;
        font-size: 1.1em;
        color: #333;
        flex: 1;
    }

    .item-price {
        color: #e74c3c;
        font-weight: 500;
        margin-left: 10px;
    }

    .item-rating {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .item-rating .stars {
        display: flex;
        gap: 2px;
    }

    .item-rating .star {
        font-size: 16px;
        color: #ddd;
    }

    .item-rating .star.filled {
        color: #f39c12;
    }

    .item-rating .review-count {
        color: #666;
        font-size: 0.9em;
    }

    .action-buttons {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 20px;
    }

    .btn {
        padding: 8px 20px;
        border-radius: 5px;
        text-decoration: none;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
        border: none;
    }

    .btn-outline-primary {
        background-color: transparent;
        color: #007bff;
        border: 1px solid #007bff;
    }

    .btn:hover {
        opacity: 0.9;
        transform: translateY(-1px);
    }

    .item-info {
        text-align: center;
        padding-bottom: 15px;
        border-bottom: 1px solid #eee;
    }

    .item-rating-summary {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        margin-top: 10px;
    }

    .review-item {
        padding: 15px;
        border-bottom: 1px solid #eee;
    }

    .review-item:last-child {
        border-bottom: none;
    }

    .review-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
    }

    .review-user {
        font-weight: bold;
        color: #333;
    }

    .review-date {
        color: #999;
        font-size: 0.9em;
    }

    .review-rating {
        display: flex;
        align-items: center;
        gap: 5px;
        margin-bottom: 10px;
    }

    .review-comment {
        color: #555;
        line-height: 1.5;
    }

    @@media (max-width: 992px) {
        .menu-items-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    @@media (max-width: 576px) {
        .menu-items-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const categoryFilters = document.querySelectorAll('.category-filter');
            const menuCategories = document.querySelectorAll('.menu-category');
            const sortSelect = document.getElementById('sortOrder');
            const allCheckbox = document.getElementById('category-all');

            function updateVisibility() {
                const selectedCategories = Array.from(categoryFilters)
                    .filter(cb => cb.checked && cb.value !== 'all')
                    .map(cb => cb.value);

                menuCategories.forEach(category => {
                    if (selectedCategories.includes(category.dataset.category)) {
                        category.style.display = 'block';
                    } else {
                        category.style.display = 'none';
                    }
                });

                // 更新"全部"勾選框的狀態
                const allCategoriesChecked = Array.from(categoryFilters)
                    .filter(cb => cb.value !== 'all')
                    .every(cb => cb.checked);
                allCheckbox.checked = allCategoriesChecked;
            }

            function toggleAllCategories(checked) {
                categoryFilters.forEach(filter => {
                    if (filter.value !== 'all') {
                        filter.checked = checked;
                    }
                });
                updateVisibility();
            }

            // 監聽"全部"勾選框的變化
            allCheckbox.addEventListener('change', function() {
                toggleAllCategories(this.checked);
            });

            // 監聽個別類別勾選框的變化
            categoryFilters.forEach(filter => {
                if (filter.value !== 'all') {
                    filter.addEventListener('change', function() {
                        updateVisibility();
                    });
                }
            });

            function sortMenuItems() {
                const sortValue = sortSelect.value;
                menuCategories.forEach(category => {
                    const itemsGrid = category.querySelector('.menu-items-grid');
                    const items = Array.from(itemsGrid.children);

                    items.sort((a, b) => {
                        switch(sortValue) {
                            case 'rating-desc':
                                return parseFloat(b.dataset.rating) - parseFloat(a.dataset.rating);
                            case 'rating-asc':
                                return parseFloat(a.dataset.rating) - parseFloat(b.dataset.rating);
                            case 'price-desc':
                                return parseFloat(b.dataset.price) - parseFloat(a.dataset.price);
                            case 'price-asc':
                                return parseFloat(a.dataset.price) - parseFloat(a.dataset.price);
                            default:
                                return 0;
                        }
                    });

                    items.forEach(item => itemsGrid.appendChild(item));
                });
            }

            sortSelect.addEventListener('change', sortMenuItems);
        });

        // 顯示評論彈出式視窗
        function showReviews(element) {
            const itemId = element.dataset.itemId;
            const itemName = element.dataset.itemName;
            const rating = parseFloat(element.dataset.itemRating);
            const reviewCount = parseInt(element.dataset.itemReviews);

            // 設置彈出式視窗標題和評分
            document.getElementById('modalItemName').textContent = itemName;
            document.getElementById('modalItemRating').textContent = rating.toFixed(1);
            document.getElementById('modalItemReviewCount').textContent = `(${reviewCount} 則評論)`;
            
            // 設置星級評分
            const starsContainer = document.getElementById('modalItemStars');
            starsContainer.innerHTML = '';
            for (let i = 1; i <= 5; i++) {
                const star = document.createElement('span');
                star.className = i <= Math.round(rating) ? 'star filled' : 'star';
                star.textContent = i <= Math.round(rating) ? '★' : '☆';
                starsContainer.appendChild(star);
            }
            
            // 清空評論容器
            const reviewsContainer = document.getElementById('reviewsContainer');
            reviewsContainer.innerHTML = '';
            
            // 獲取該菜單項目的所有評論
            const reviews = @Html.Raw(Json.Serialize(Model.MenuItems
                .Select(m => new {
                    MenuItemId = m.MenuItemId,
                    Reviews = m.Reviews
                        .OrderByDescending(r => r.ReviewDate)
                        .Select(r => new {
                            UserName = r.User?.Username ?? "匿名用戶",
                            Rating = r.Rating,
                            Comment = r.Comment,
                            ReviewDate = r.ReviewDate?.ToString("yyyy-MM-dd HH:mm")
                        })
                })
                .ToDictionary(m => m.MenuItemId, m => m.Reviews)));
            
            const itemReviews = reviews[itemId] || [];
            
            if (itemReviews.length > 0) {
                itemReviews.forEach(review => {
                    const reviewElement = document.createElement('div');
                    reviewElement.className = 'review-item';
                    
                    const reviewHeader = document.createElement('div');
                    reviewHeader.className = 'review-header';
                    
                    const reviewUser = document.createElement('div');
                    reviewUser.className = 'review-user';
                    reviewUser.textContent = review.userName;
                    
                    const reviewDate = document.createElement('div');
                    reviewDate.className = 'review-date';
                    reviewDate.textContent = review.reviewDate;
                    
                    reviewHeader.appendChild(reviewUser);
                    reviewHeader.appendChild(reviewDate);
                    
                    const reviewRating = document.createElement('div');
                    reviewRating.className = 'review-rating';
                    
                    const ratingStars = document.createElement('div');
                    ratingStars.className = 'stars';
                    for (let i = 1; i <= 5; i++) {
                        const star = document.createElement('span');
                        star.className = i <= review.rating ? 'star filled' : 'star';
                        star.textContent = i <= review.rating ? '★' : '☆';
                        ratingStars.appendChild(star);
                    }
                    
                    reviewRating.appendChild(ratingStars);
                    
                    const reviewComment = document.createElement('div');
                    reviewComment.className = 'review-comment';
                    reviewComment.textContent = review.comment || '無評論內容';
                    
                    reviewElement.appendChild(reviewHeader);
                    reviewElement.appendChild(reviewRating);
                    reviewElement.appendChild(reviewComment);
                    
                    reviewsContainer.appendChild(reviewElement);
                });
            } else {
                const noReviews = document.createElement('div');
                noReviews.className = 'text-center py-4';
                noReviews.textContent = '尚無評論';
                reviewsContainer.appendChild(noReviews);
            }
            
            // 顯示彈出式視窗
            const modal = new bootstrap.Modal(document.getElementById('reviewsModal'));
            modal.show();
        }
    </script>
}